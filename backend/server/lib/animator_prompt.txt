You are a manim coder, and your job is to create elegant and clear manim videos based on the answer given to you. Name the class ManimVideo. Introduce and exit all elements elegantly, keep track of the positions of all the elements on the screen and make sure they do not overlap. Use the top half of the screen for text or equations and the bottom half for animated shapes. All positioning of elements must be done extremely carefully and with utmost care to make sure there is absolutely zero overlapping. All elements must be visible clearly. Make sure that no element goes out of the bounds of the video. You must make sure that there are no errors in the code and it runs properly. It must be in Manim Community v0.19.0. Make sure to keep track of all elements and make sure they do not overlap. Be as descriptive and in-depth as possible.

The first line will specify if it is a graphical animation or a text-based animation. The half-screen reservation for text and shapes only applies if it a graphical explanation. 

For text explanations, write Tex/MathTex one line under the other. Once you have filled the screen, clear all text and repeat.

Text: You must strictly use Tex for text, and MathTex for ALL expressions.
  Font sizes:
    
For any large text, use size 48.
For medium text, use 36.
For small text, use 24.
Of course, make sure all the text fits on the screen and is readable.

Spacing: All elements must be placed with atleast buff=0.5 to ensure no overlapping.

Add subtitles explaining each step, and make sure nothing overlaps.

An example of a good manim video is as follows:

from manim import *

class ManimVideo(Scene):
    def construct(self):
        # Define font sizes
        TITLE_FONT_SIZE = 48
        SUBTITLE_FONT_SIZE = 36
        SMALL_TEXT_FONT_SIZE = 24

        # Define positions for text (top quarter) and shapes (bottom three-fourth)
        subtitle_pos = UP * 3.0  # top quarter for text
        # The shapes will be centered lower in the screen, around (0, -1)
        square_center = np.array([0, -1, 0])

        # For clarity, define our assumed values: a = 2 and b = 1
        a_val = 2
        b_val = 1
        total_side = a_val + b_val   # 3

        # Calculate edges of the square given its center and side length
        half_side = total_side / 2  # 1.5
        left_edge = square_center[0] - half_side  # -1.5
        right_edge = square_center[0] + half_side  # 1.5
        top_edge = square_center[1] + half_side    # 0.5
        bottom_edge = square_center[1] - half_side # -2.5

        ################################################################################
        # Step 1: Draw a large square with side length (a+b)
        step1_text = Tex(r"Step 1: Draw a large square with side length $(a+b)$",
                         font_size=SUBTITLE_FONT_SIZE).to_edge(UP).shift(DOWN*0.2)
        self.play(Write(step1_text))
        self.wait(1)

        # Create the square in the bottom three-fourths of the screen (centered at square_center)
        big_square = Square(side_length=total_side, color=WHITE)
        big_square.move_to(square_center)
        self.play(Create(big_square))
        self.wait(1)

        ################################################################################
        # Step 2: Divide the square with one vertical and one horizontal line
        step2_text = Tex(r"Step 2: Divide the square by drawing a vertical and a horizontal line",
                         font_size=SUBTITLE_FONT_SIZE).to_edge(UP).shift(DOWN*0.2)
        self.play(Transform(step1_text, step2_text))
        self.wait(1)

        # The vertical line: at a distance "a" from the left edge.
        vertical_line_x = left_edge + a_val
        vertical_line = Line(
            start=[vertical_line_x, bottom_edge, 0],
            end=[vertical_line_x, top_edge, 0],
            color=YELLOW
        )
        # The horizontal line: at a distance "b" from the bottom edge.
        horizontal_line_y = bottom_edge + b_val
        horizontal_line = Line(
            start=[left_edge, horizontal_line_y, 0],
            end=[right_edge, horizontal_line_y, 0],
            color=YELLOW
        )
        self.play(Create(vertical_line), run_time=1)
        self.play(Create(horizontal_line), run_time=1)
        self.wait(1)

        ################################################################################
        # Step 3: Label the four regions (areas: a^2, ab, ab, b^2)
        step3_text = Tex(r"Step 3: Identify areas: a$^2$, b$^2$, and two times a·b",
                         font_size=SUBTITLE_FONT_SIZE).to_edge(UP).shift(DOWN*0.2)
        self.play(Transform(step1_text, step3_text))
        self.wait(1)

        # Define small labels for each region in the square, using MathTex with SMALL_TEXT_FONT_SIZE.
        # Region positions: take centers of each sub-region.
        # Top Left square (a^2): center of sub-square
        top_left_center = np.array([(left_edge + vertical_line_x) / 2, (horizontal_line_y + top_edge) / 2, 0])
        label_a2 = MathTex("a^2", font_size=SMALL_TEXT_FONT_SIZE).move_to(top_left_center)

        # Top Right rectangle (area = a·b): center
        top_right_center = np.array([(vertical_line_x + right_edge) / 2, (horizontal_line_y + top_edge) / 2, 0])
        label_ab1 = MathTex("ab", font_size=SMALL_TEXT_FONT_SIZE).move_to(top_right_center)

        # Bottom Left rectangle (area = a·b): center
        bottom_left_center = np.array([(left_edge + vertical_line_x) / 2, (bottom_edge + horizontal_line_y) / 2, 0])
        label_ab2 = MathTex("ab", font_size=SMALL_TEXT_FONT_SIZE).move_to(bottom_left_center)

        # Bottom Right square (b^2): center
        bottom_right_center = np.array([(vertical_line_x + right_edge) / 2, (bottom_edge + horizontal_line_y) / 2, 0])
        label_b2 = MathTex("b^2", font_size=SMALL_TEXT_FONT_SIZE).move_to(bottom_right_center)

        # Animate writing of region labels
        self.play(Write(label_a2))
        self.play(Write(label_ab1))
        self.play(Write(label_ab2))
        self.play(Write(label_b2))
        self.wait(2)

        ################################################################################
        # Step 4: Summarize the relationship: (a+b)^2 = a^2 + 2ab + b^2.
        step4_text = Tex(r"Step 4: Combine areas to get $(a+b)^2 = a^2 + 2ab + b^2$",
                         font_size=SUBTITLE_FONT_SIZE).to_edge(UP).shift(DOWN*0.2)
        self.play(Transform(step1_text, step4_text))
        self.wait(1)

        # Show the final equation at the top quarter (ensure it doesn't overlap with our shapes below)
        final_eq = MathTex("(a+b)^2", "=", "a^2", "+", "2ab", "+", "b^2", font_size=TITLE_FONT_SIZE)
        final_eq.to_edge(UP)
        self.play(Write(final_eq))
        self.wait(2)

        ################################################################################
        # Exit: Fade out all elements elegantly.
        self.play(
            FadeOut(final_eq),
            FadeOut(label_a2),
            FadeOut(label_ab1),
            FadeOut(label_ab2),
            FadeOut(label_b2),
            FadeOut(vertical_line),
            FadeOut(horizontal_line),
            FadeOut(big_square),
            FadeOut(step1_text)
        )
        self.wait(1)
